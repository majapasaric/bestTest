{"version":3,"sources":["../../../../server/models-sequelize/models/user.js"],"names":["bcrypt","require","module","exports","sequelize","DataTypes","User","define","id","UUID","primaryKey","defaultValue","UUIDV4","password","STRING","allowNull","email","validate","isEmail","unique","personalIdentificationNumber","address","phoneContact","educationLevel","occupation","gender","type","ENUM","values","isSysAdmin","BOOLEAN","isOrgAdmin","classMethods","associate","models","belongsTo","Organization","belongsToMany","Group","through","UsersGroups","generateHash","hashSync","genSaltSync","instanceMethods","validPassword","compareSync"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,UAAR,CAAf;;AAEAC,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,SAAZ,EAAwB;AACrC,QAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AAC9BC,YAAIH,UAAUI,IADgB;AAE9BC,oBAAa,IAFiB;AAG9BC,sBAAeN,UAAUO;AAHK,KAAzB,EAIN;AACCC,kBAAWR,UAAUS,MADtB;AAECC,mBAAY;AAFb,KAJM,EAQT;AACIC,eAAQX,UAAUS,MADtB;AAEIG,kBAAW,EAACC,SAAS,IAAV,EAFf;AAGIC,gBAAQ;AAHZ,KARS,EAaP;AACEC,sCAA+Bf,UAAUS,MAD3C;AAEEC,mBAAW;AAFb,KAbO,EAiBT;AACIM,iBAAUhB,UAAUS;AADxB,KAjBS,EAoBT;AACIQ,sBAAcjB,UAAUS;AAD5B,KApBS,EAuBT;AACIS,wBAAiBlB,UAAUS;AAD/B,KAvBS,EA0BT;AACIU,oBAAanB,UAAUS;AAD3B,KA1BS,EA6BT;AACIW,gBAAS;AACLC,kBAAQrB,UAAUsB,IADb;AAELC,oBAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,YAA/B,EAA6C,2BAA7C;AAFH;AADb,KA7BS,EAmCT;AACIC,oBAAYxB,UAAUyB,OAD1B;AAEInB,sBAAc;AAFlB,KAnCS,EAuCT;AACIoB,oBAAY1B,UAAUyB,OAD1B;AAEInB,sBAAc;AAFlB,KAvCS,EA2CT;AACIqB,sBAAc;AACVC,uBAAY,mBAACC,MAAD,EAAW;AACnB5B,qBAAK6B,SAAL,CAAeD,OAAOE,YAAtB;AACA9B,qBAAK+B,aAAL,CAAmBH,OAAOI,KAA1B,EAAiC,EAAEC,SAASL,OAAOM,WAAlB,EAAjC;AACH,aAJS;AAKVC,0BAAe,sBAAS5B,QAAT,EAAmB;AAC9B,uBAAOb,OAAO0C,QAAP,CAAgB7B,QAAhB,EAA0Bb,OAAO2C,WAAP,CAAmB,EAAnB,CAA1B,EAAkD,IAAlD,CAAP;AACH;AAPS,SADlB;AAUIC,yBAAiB;AACbC,2BAAgB,uBAAChC,QAAD,EAAa;AACzB,uBAAOb,OAAO8C,WAAP,CAAmBjC,QAAnB,EAA6B,UAAKA,QAAlC,CAAP;AACH;AAHY;AAVrB,KA3CS,CAAb;;AA4DA,WAAOP,IAAP;AACH,CA9DD","file":"user.js","sourcesContent":["const bcrypt = require('bcryptjs');\n\nmodule.exports = (sequelize, DataTypes)=>{\n    const User = sequelize.define('User', {\n            id: DataTypes.UUID,\n            primaryKey : true,\n            defaultValue : DataTypes.UUIDV4\n        }, {\n            password : DataTypes.STRING,\n            allowNull : false\n        },\n        {\n            email : DataTypes.STRING,\n            validate : {isEmail: true},\n            unique: true\n        }\n        , {\n            personalIdentificationNumber : DataTypes.STRING,\n            allowNull: false\n        },\n        {\n            address : DataTypes.STRING\n        },\n        {\n            phoneContact: DataTypes.STRING\n        },\n        {\n            educationLevel : DataTypes.STRING\n        },\n        {\n            occupation : DataTypes.STRING\n        },\n        {\n            gender : {\n                type:   DataTypes.ENUM,\n                values: ['male', 'female', 'intersex', 'non-binary', 'would rather not disclose']\n            }\n        },\n        {\n            isSysAdmin: DataTypes.BOOLEAN,\n            defaultValue: false\n        },\n        {\n            isOrgAdmin: DataTypes.BOOLEAN,\n            defaultValue: false\n        },\n        {\n            classMethods: {\n                associate : (models)=> {\n                    User.belongsTo(models.Organization);\n                    User.belongsToMany(models.Group, { through: models.UsersGroups });\n                },\n                generateHash : function(password) {\n                    return bcrypt.hashSync(password, bcrypt.genSaltSync(10), null);\n                }\n            },\n            instanceMethods: {\n                validPassword : (password)=> {\n                    return bcrypt.compareSync(password, this.password);\n                }\n            }\n        });\n\n    return User;\n};"]}