{"version":3,"sources":["../../../../server/models-sequelize/models/question.js"],"names":["module","exports","sequelize","DataTypes","Question","define","text","STRING","id","UUID","primaryKey","defaultValue","UUIDV4","revisionCode","INTEGER","timesTaken","timesAnswered","difficultyLevel","ENUM","values","answerInputType","answerContentType","pointsIfCorrect","FLOAT","allowNull","validate","isFloat","isGreaterThanZero","value","parseFloat","Error","pointsIfIncorrect","classMethods","associate","models","hasMany","Answer","belongsToMany","QuestionPool","through","QuestionsQuestionPools","hasOne","QuestionImage","foreignKey","as"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,SAAZ,EAAyB;AACtC,QAAMC,WAAWF,UAAUG,MAAV,CAAiB,UAAjB,EAA6B;AACtCC,cAAMH,UAAUI;AADsB,KAA7B,EAGb;AACIC,YAAIL,UAAUM,IADlB;AAEIC,oBAAa,IAFjB;AAGIC,sBAAeR,UAAUS;AAH7B,KAHa,EAQb;AACIC,sBAAeV,UAAUW,OAD7B;AAEIJ,oBAAa,IAFjB;AAGIC,sBAAe;AAHnB,KARa,EAab;AACII,oBAAYZ,UAAUW,OAD1B;AAEIH,sBAAe;AAFnB,KAba,EAiBb;AACIK,uBAAeb,UAAUW,OAD7B;AAEIH,sBAAe;AAFnB,KAjBa,EAqBb;AACIM,yBAAiBd,UAAUA,SAAV,CAAoBe,IADzC;AAEIC,gBAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,gBAAhC;AAFZ,KArBa,EAyBb;AACIC,yBAAiBjB,UAAUe,IAD/B;AAEIC,gBAAQ,CAAC,UAAD,EAAa,cAAb,EAA6B,YAA7B;AAFZ,KAzBa,EA6Bb;AACIE,2BAAmBlB,UAAUe,IADjC;AAEIC,gBAAQ,CAAC,WAAD,EAAc,YAAd,EAA4B,eAA5B;AAFZ,KA7Ba,EAiCb;AACIG,yBAAkBnB,UAAUoB,KADhC;AAEIZ,sBAAe,CAFnB;AAGIa,mBAAY,KAHhB;AAIIC,kBAAW;AACPC,qBAAU,IADH;AAEPC,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAGC,WAAWD,KAAX,KAAmB,CAAtB,EAAyB;AACrB,0BAAM,IAAIE,KAAJ,CAAU,yEAAV,CAAN;AACH;AACJ;AANM;AAJf,KAjCa,EA8Cb;AACIC,2BAAoB5B,UAAUoB,KADlC;AAEIZ,sBAAe,CAFnB;AAGIa,mBAAY,KAHhB;AAIIC,kBAAW;AACPC,qBAAU,IADH;AAEPC,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAGC,WAAWD,KAAX,IAAkB,CAArB,EAAwB;AACpB,0BAAM,IAAIE,KAAJ,CAAU,uGAAV,CAAN;AACH;AACJ;AANM;AAJf,KA9Ca,EA2Db;AACIE,sBAAc;AACVC,uBAAW,mBAACC,MAAD,EAAY;AACnB9B,yBAAS+B,OAAT,CAAiBD,OAAOE,MAAxB;AACAhC,yBAASiC,aAAT,CAAuBH,OAAOI,YAA9B,EAA4C,EAACC,SAASL,OAAOM,sBAAjB,EAA5C;AACApC,yBAASqC,MAAT,CAAgBP,OAAOQ,aAAvB,EAAsC,EAACC,YAAY,YAAb,EAA2BC,IAAI,QAA/B,EAAtC;AACH;AALS;AADlB,KA3Da,CAAjB;AAoEA,WAAOxC,QAAP;AACH,CAtED","file":"question.js","sourcesContent":["module.exports = (sequelize, DataTypes)=> {\n    const Question = sequelize.define('Question', {\n            text: DataTypes.STRING\n        },\n        {\n            id: DataTypes.UUID,\n            primaryKey : true,\n            defaultValue : DataTypes.UUIDV4\n        },\n        {\n            revisionCode : DataTypes.INTEGER,\n            primaryKey : true,\n            defaultValue : 0\n        },\n        {\n            timesTaken: DataTypes.INTEGER,\n            defaultValue : 0\n        },\n        {\n            timesAnswered: DataTypes.INTEGER,\n            defaultValue : 0\n        },\n        {\n            difficultyLevel: DataTypes.DataTypes.ENUM,\n            values: ['easy', 'medium', 'difficult', 'very difficult']\n        },\n        {\n            answerInputType: DataTypes.ENUM,\n            values: ['checkbox', 'radio button', 'user input']\n        },\n        {\n            answerContentType: DataTypes.ENUM,\n            values: ['text only', 'image only', 'mixed content']\n        },\n        {\n            pointsIfCorrect : DataTypes.FLOAT,\n            defaultValue : 1,\n            allowNull : false,\n            validate : {\n                isFloat : true,\n                isGreaterThanZero: (value) => {\n                    if(parseFloat(value)<=0) {\n                        throw new Error('The correct answer must award the candidate with more than zero points!');\n                    }\n                }\n            }\n        },\n        {\n            pointsIfIncorrect : DataTypes.FLOAT,\n            defaultValue : 0,\n            allowNull : false,\n            validate : {\n                isFloat : true,\n                isGreaterThanZero: (value) => {\n                    if(parseFloat(value)>0) {\n                        throw new Error('The incorrect answer should either award the candidate with zero points or give them negative points!');\n                    }\n                }\n            }\n        },\n        {\n            classMethods: {\n                associate: (models) => {\n                    Question.hasMany(models.Answer);\n                    Question.belongsToMany(models.QuestionPool, {through: models.QuestionsQuestionPools});\n                    Question.hasOne(models.QuestionImage, {foreignKey: 'questionId', as: 'qImage'});\n                }\n            }\n        });\n    return Question;\n};"]}