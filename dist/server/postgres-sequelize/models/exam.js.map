{"version":3,"sources":["../../../../server/models-sequelize/models/exam.js"],"names":["module","exports","sequelize","DataTypes","Exam","define","name","STRING","id","UUID","primaryKey","defaultValue","UUIDV4","examPassFloor","FLOAT","validate","isFloat","isGreaterThanZero","value","parseFloat","Error","isPercentage","durationInMinutes","attempts","integer","isInt","isPositive","parseInt","activeFrom","DATE","activeTill","allowNull","classMethods","associate","models","belongsTo","User","as"],"mappings":"AAAA;;AACAA,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,SAAZ,EAAyB;AACtC,QAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AAC9BC,cAAMH,UAAUI;AADc,KAAzB,EAGT;AACIC,YAAIL,UAAUM,IADlB;AAEIC,oBAAa,IAFjB;AAGIC,sBAAeR,UAAUS;AAH7B,KAHS,EAQT;AACIC,uBAAgBV,UAAUW,KAD9B;AAEIC,kBAAW;AACPC,qBAAS,IADF;AAEPC,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAIC,WAAWD,KAAX,KAAqB,CAAzB,EAA4B;AACxB,0BAAM,IAAIE,KAAJ,CAAU,2DAAV,CAAN;AACH;AACJ,aANM;AAOPC,0BAAc,sBAACH,KAAD,EAAW;AACrB,oBAAIC,WAAWD,KAAX,IAAoB,GAAxB,EAA6B;AACzB,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH;AACJ;AAXM;AAFf,KARS,EAwBT;AACIE,2BAAoBnB,UAAUW,KADlC;AAEIC,kBAAW;AACPC,qBAAU,IADH;AAEPC,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAIC,WAAWD,KAAX,KAAqB,CAAzB,EAA4B;AACxB,0BAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACH;AACJ;AANM;AAFf,KAxBS,EAmCT;AACIG,kBAAWpB,UAAUqB,OADzB;AAEIT,kBAAW;AACPU,mBAAQ,IADD;AAEPC,wBAAa,oBAACR,KAAD,EAAW;AACpB,oBAAGS,SAAST,QAAQ,CAAjB,CAAH,EAAuB;AACnB,0BAAM,IAAIE,KAAJ,CAAU,uDAAV,CAAN;AACH;AACJ;AANM;AAFf,KAnCS,EA8CT;AACIQ,oBAAazB,UAAU0B;AAD3B,KA9CS,EAiDT;AACIC,oBAAa3B,UAAU0B,IAD3B;AAEIE,mBAAY,IAFhB;AAGIpB,sBAAc;AAHlB,KAjDS,EAsDT;AACIqB,sBAAc;AACVC,uBAAW,mBAASC,MAAT,EAAiB;AACxB9B,qBAAK+B,SAAL,CAAeD,OAAOE,IAAtB,EAA4B,EAACC,IAAK,WAAN,EAA5B;AACH;AAHS;AADlB,KAtDS,CAAb;AA6DA,WAAOjC,IAAP;AACH,CA/DD","file":"exam.js","sourcesContent":["'use strict';\nmodule.exports = (sequelize, DataTypes)=> {\n    const Exam = sequelize.define('Exam', {\n            name: DataTypes.STRING\n        },\n        {\n            id: DataTypes.UUID,\n            primaryKey : true,\n            defaultValue : DataTypes.UUIDV4\n        },\n        {\n            examPassFloor : DataTypes.FLOAT,\n            validate : {\n                isFloat: true,\n                isGreaterThanZero: (value) => {\n                    if (parseFloat(value) <= 0) {\n                        throw new Error('The pass criteria cannot be set as a negative percentage!');\n                    }\n                },\n                isPercentage: (value) => {\n                    if (parseFloat(value) > 100) {\n                        throw new Error('The pass criteria cannot be more than 100%!');\n                    }\n                }\n            }\n        },\n        {\n            durationInMinutes : DataTypes.FLOAT,\n            validate : {\n                isFloat : true,\n                isGreaterThanZero: (value) => {\n                    if (parseFloat(value) <= 0) {\n                        throw new Error('The duration must be set in minutes!');\n                    }\n                }\n            }\n        },\n        {\n            attempts : DataTypes.integer,\n            validate : {\n                isInt : true,\n                isPositive : (value) => {\n                    if(parseInt(value < 1)){\n                        throw new Error('The user must be able to take the exam at least once!');\n                    }\n                }\n            }\n        },\n        {\n            activeFrom : DataTypes.DATE\n        },\n        {\n            activeTill : DataTypes.DATE,\n            allowNull : true,\n            defaultValue: null\n        },\n        {\n            classMethods: {\n                associate: function(models) {\n                    Exam.belongsTo(models.User, {as : 'createdBy'})\n                }\n            }\n        });\n    return Exam;\n};"]}