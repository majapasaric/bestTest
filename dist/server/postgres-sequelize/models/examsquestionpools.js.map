{"version":3,"sources":["../../../../server/models-sequelize/models/examsquestionpools.js"],"names":["module","exports","sequelize","DataTypes","ExamsQuestionPools","define","questionAmount","INTEGER","poolPassFloor","FLOAT","allowNull","validate","isFloat","isGreaterThanZero","value","parseFloat","Error","isPercentage","questionCount","isInt","parseInt","isWithinBounds","classMethods","associate","models","instanceMethods"],"mappings":"AAAA;;AACAA,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,SAAZ,EAAyB;AACtC,QAAMC,qBAAqBF,UAAUG,MAAV,CAAiB,oBAAjB,EAAuC;AAC1DC,wBAAgBH,UAAUI;AADgC,KAAvC,EAGvB;AACIC,uBAAgBL,UAAUM,KAD9B;AAEIC,mBAAY,IAFhB;AAGIC,kBAAW;AACPC,qBAAU,IADH;AAEPC,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAGC,WAAWD,KAAX,KAAmB,CAAtB,EAAyB;AACrB,0BAAM,IAAIE,KAAJ,CAAU,2DAAV,CAAN;AACH;AACJ,aANM;AAOPC,0BAAc,sBAACH,KAAD,EAAW;AACrB,oBAAGC,WAAWD,KAAX,IAAkB,GAArB,EAA0B;AACtB,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH;AACJ;AAXM;AAHf,KAHuB,EAoBvB;AACIE,uBAAgBf,UAAUI,OAD9B;AAEII,kBAAW;AACPQ,mBAAQ,IADD;AAEPN,+BAAmB,2BAACC,KAAD,EAAW;AAC1B,oBAAGM,SAASN,KAAT,KAAiB,CAApB,EAAuB;AACnB,0BAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AACH;AACJ,aANM;AAOPK,4BAAiB;AAPV;;AAFf,KApBuB,EAiCvB;AACIC,sBAAc;AACVC,uBAAW,mBAACC,MAAD,EAAW,CAErB;AAHS,SADlB;AAMIC,yBAAkB;AANtB,KAjCuB,CAA3B;AA0CA,WAAOrB,kBAAP;AACH,CA5CD","file":"examsquestionpools.js","sourcesContent":["'use strict';\nmodule.exports = (sequelize, DataTypes)=> {\n    const ExamsQuestionPools = sequelize.define('ExamsQuestionPools', {\n            questionAmount: DataTypes.INTEGER\n        },\n        {\n            poolPassFloor : DataTypes.FLOAT,\n            allowNull : true,\n            validate : {\n                isFloat : true,\n                isGreaterThanZero: (value) => {\n                    if(parseFloat(value)<=0) {\n                        throw new Error('The pass criteria cannot be set as a negative percentage!');\n                    }\n                },\n                isPercentage: (value) => {\n                    if(parseFloat(value)>100) {\n                        throw new Error('The pass criteria cannot be more than 100%!');\n                    }\n                }\n            }\n        },\n        {\n            questionCount : DataTypes.INTEGER,\n            validate : {\n                isInt : true,\n                isGreaterThanZero: (value) => {\n                    if(parseInt(value)<=0) {\n                        throw new Error('The amount of questions cannot be set as zero or negative!');\n                    }\n                },\n                isWithinBounds : true\n            }\n\n        },\n        {\n            classMethods: {\n                associate: (models)=> {\n\n                }\n            },\n            instanceMethods : {\n            }\n        });\n    return ExamsQuestionPools;\n};"]}