{"version":3,"sources":["../app.js"],"names":["express","require","session","redisStore","path","favicon","logger","cookieParser","bodyParser","helmet","passport","redis","index","users","app","config","use","contentSecurityPolicy","directives","defaultSrc","styleSrc","Sequelize","sequelize","process","env","DB_NAME","DB_USERNAME","DB_PASSWORD","dialect","SEQUELIZE_DIALECT","port","DB_PORT","authenticate","then","err","console","log","client","REDIS_URL","createClient","REDIS_PORT","REDIS_HOST","hugizgzgzg","store","secret","SECRET_KEY","resave","saveUninitialized","initialize","set","join","__dirname","json","urlencoded","extended","static","req","res","next","Error","status","locals","message","error","get","render","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,UAAUD,QAAQ,iBAAR,CAAhB;AACA,IAAME,aAAaF,QAAQ,eAAR,EAAyBC,OAAzB,CAAnB;AACA,IAAME,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,UAAUJ,QAAQ,eAAR,CAAhB;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,eAAeN,QAAQ,eAAR,CAArB;AACA,IAAMO,aAAaP,QAAQ,aAAR,CAAnB;AACA,IAAMQ,SAASR,QAAQ,QAAR,CAAf;AACA,IAAIS,WAAWT,QAAQ,UAAR,CAAf;AACA,IAAMU,QAAQV,QAAQ,OAAR,CAAd;;AAEA,IAAMW,QAAQX,QAAQ,gBAAR,CAAd,C,CAAwC;AACxC,IAAMY,QAAQZ,QAAQ,gBAAR,CAAd;;AAEA,IAAMa,MAAMd,SAAZ;AACAC,QAAQ,QAAR,EAAkBc,MAAlB,CAAyB,EAACX,MAAM,4BAAP,EAAzB;AACAU,IAAIE,GAAJ,CAAQP,QAAR;AACAK,IAAIE,GAAJ,CAAQP,OAAOQ,qBAAP,CAA6B;AACjCC,gBAAY;AACRC,oBAAY,CAAC,QAAD,CADJ;AAERC,kBAAU,CAAC,QAAD;AAFF;AADqB,CAA7B,CAAR;;AAOA,IAAMC,YAAYpB,QAAQ,WAAR,CAAlB;AAAA,IACMqB,YAAY,IAAID,SAAJ,CAAcE,QAAQC,GAAR,CAAYC,OAA1B,EAAmCF,QAAQC,GAAR,CAAYE,WAA/C,EAA4DH,QAAQC,GAAR,CAAYG,WAAxE,EAAqF;AACnGC,aAASL,QAAQC,GAAR,CAAYK,iBAD8E,EAC3D;AACxCC,UAASP,QAAQC,GAAR,CAAYO;AAF8E,CAArF,CADlB;;AAMAT,UACKU,YADL,GAEKC,IAFL,CAEU,UAASC,GAAT,EAAc;AAChBC,YAAQC,GAAR,CAAY,+CAAZ;AACH,CAJL,EAIO,UAAUF,GAAV,EAAe;AACdC,YAAQC,GAAR,CAAY,oCAAZ,EAAkDF,GAAlD;AACH,CANL;;AAQA,IAAIG,eAAJ;AACApC,QAAQ,mBAAR,EAA6BS,QAA7B;AACA,IAAG,OAAOa,QAAQC,GAAR,CAAYc,SAAnB,KAAiC,WAApC,EAAgD;AAC5CD,aAAS1B,MAAM4B,YAAN,CAAmBhB,QAAQC,GAAR,CAAYgB,UAA/B,EAA2CjB,QAAQC,GAAR,CAAYiB,UAAvD,CAAT;AACH,CAFD,MAEK;AACDJ,aAAS1B,MAAM4B,YAAN,CAAmBhB,QAAQC,GAAR,CAAYc,SAA/B,CAAT,CAAmDI;AACtD;AACD5B,IAAIE,GAAJ,CAAQd,QAAQ;AACZyC,WAAO,IAAIxC,UAAJ,CAAe;AAClBkC,gBAAQA;AADU,KAAf,CADK;AAIZO,YAAQrB,QAAQC,GAAR,CAAYqB,UAJR;AAKZC,YAAQ,KALI;AAMZC,uBAAmB;AANP,CAAR,CAAR;AAQAjC,IAAIE,GAAJ,CAAQN,SAASsC,UAAT,EAAR;AACAlC,IAAIE,GAAJ,CAAQN,SAASR,OAAT,EAAR;;AAEA;AACAY,IAAImC,GAAJ,CAAQ,OAAR,EAAiB7C,KAAK8C,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACArC,IAAImC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEA;AACA;AACAnC,IAAIE,GAAJ,CAAQV,OAAO,KAAP,CAAR;AACAQ,IAAIE,GAAJ,CAAQR,WAAW4C,IAAX,EAAR;AACAtC,IAAIE,GAAJ,CAAQR,WAAW6C,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAxC,IAAIE,GAAJ,CAAQT,cAAR;AACAO,IAAIE,GAAJ,CAAQhB,QAAQuD,MAAR,CAAenD,KAAK8C,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEArC,IAAIE,GAAJ,CAAQ,GAAR,EAAaJ,KAAb;AACAE,IAAIE,GAAJ,CAAQ,QAAR,EAAkBH,KAAlB;;AAEAZ,QAAQ,iBAAR,EAA2Ba,GAA3B,EAAgCJ,QAAhC;;AAEA;AACAI,IAAIE,GAAJ,CAAQ,UAACwC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AACzB,QAAIxB,MAAM,IAAIyB,KAAJ,CAAU,WAAV,CAAV;AACAzB,QAAI0B,MAAJ,GAAa,GAAb;AACAF,SAAKxB,GAAL;AACD,CAJD;;AAMA;AACApB,IAAIE,GAAJ,CAAQ,UAACkB,GAAD,EAAMsB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAwB;AAC9B;AACAD,QAAII,MAAJ,CAAWC,OAAX,GAAqB5B,IAAI4B,OAAzB;AACAL,QAAII,MAAJ,CAAWE,KAAX,GAAmBP,IAAI1C,GAAJ,CAAQkD,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuC9B,GAAvC,GAA6C,EAAhE;;AAEA;AACAuB,QAAIG,MAAJ,CAAW1B,IAAI0B,MAAJ,IAAc,GAAzB;AACAH,QAAIQ,MAAJ,CAAW,OAAX;AACD,CARD;;AAUAC,OAAOC,OAAP,GAAiBrD,GAAjB","file":"app.js","sourcesContent":["const express = require('express');\r\nconst session = require('express-session');\r\nconst redisStore = require('connect-redis')(session);\r\nconst path = require('path');\r\nconst favicon = require('serve-favicon');\r\nconst logger = require('morgan');\r\nconst cookieParser = require('cookie-parser');\r\nconst bodyParser = require('body-parser');\r\nconst helmet = require('helmet')\r\nlet passport = require('passport');\r\nconst redis = require(\"redis\");\r\n\r\nconst index = require('./routes/index');//TODO: consider removing these two\r\nconst users = require('./routes/users');\r\n\r\nconst app = express();\r\nrequire('dotenv').config({path: './environments/development'});\r\napp.use(helmet());\r\napp.use(helmet.contentSecurityPolicy({\r\n    directives: {\r\n        defaultSrc: [\"'self'\"],\r\n        styleSrc: [\"'self'\"]\r\n    }\r\n}));\r\n\r\nconst Sequelize = require('sequelize')\r\n    , sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USERNAME, process.env.DB_PASSWORD, {\r\n    dialect: process.env.SEQUELIZE_DIALECT, // or 'sqlite', 'postgres', 'mariadb'\r\n    port:    process.env.DB_PORT\r\n});\r\n\r\nsequelize\r\n    .authenticate()\r\n    .then(function(err) {\r\n        console.log('Connection has been established successfully.');\r\n    }, function (err) {\r\n        console.log('Unable to connect to the database:', err);\r\n    });\r\n\r\nlet client;\r\nrequire('./server/passport')(passport);\r\nif(typeof process.env.REDIS_URL === \"undefined\"){\r\n    client = redis.createClient(process.env.REDIS_PORT, process.env.REDIS_HOST);\r\n}else{\r\n    client = redis.createClient(process.env.REDIS_URL);hugizgzgzg\r\n}\r\napp.use(session({\r\n    store: new redisStore({\r\n        client: client\r\n    }),\r\n    secret: process.env.SECRET_KEY,\r\n    resave: false,\r\n    saveUninitialized: true\r\n}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'hbs');\r\n\r\n// uncomment after placing your favicon in /public\r\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', index);\r\napp.use('/users', users);\r\n\r\nrequire('./server/routes')(app, passport);\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next)=> {\r\n  let err = new Error('Not Found');\r\n  err.status = 404;\r\n  next(err);\r\n});\r\n\r\n// error handler\r\napp.use((err, req, res, next)=> {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\nmodule.exports = app;\r\n"]}